name: Packer CI - Build Custom Image

on:
  pull_request:
#    branches:
#      - 'main'
#    types:
#      - closed

jobs:
  if_merged:
    if: github.event.pull_request.merged == false
    name: Build Jar and Create Custom Image
    runs-on: ubuntu-latest
    env:
      DB_DATABASE: cloudDatabase
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_URL: ${{secrets.DATABASE_URL}}
      PKR_VAR_project_id: ${{secrets.project_id}}
      PKR_VAR_source_image: ${{secrets.source_image}}
      PKR_VAR_image_name: ${{secrets.image_name}}
      PKR_VAR_zone: ${{secrets.zone}}
      PKR_VAR_disk_size: ${{secrets.disk_size}}
      PKR_VAR_network: ${{secrets.network}}
      PKR_VAR_communicator: ${{secrets.communicator}}
      PKR_VAR_ssh_username: ${{secrets.ssh_username}}
      PKR_VAR_ssh_password: ${{secrets.ssh_password}}
      PKR_VAR_ssh_timeout: ${{secrets.ssh_timeout}}
      PKR_VAR_service_account_email: ${{secrets.service_account_email}}
      PKR_VAR_service_account_json: ${{secrets.service_account_json}}
      MACHINE_TYPE: ${{secrets.MACHINE_TYPE}}
      REGION: ${{secrets.REGION}}
      GCLOUD_NETWORK: ${{secrets.GCLOUD_NETWORK}}
      SUBNET: ${{secrets.SUBNET}}
      VM_INSTANCE_SERVICE_ACCOUNT: ${{secrets.VM_INSTANCE_SERVICE_ACCOUNT}}
      INSTANCE_GRP_MANAGER: ${{secrets.INSTANCE_GRP_MANAGER}}
      INSTANCE_TEMPLATE: ${{secrets.INSTANCE_TEMPLATE}}
      ROLLING_ACTION_TYPE: ${{secrets.ROLLING_ACTION_TYPE}}
      VM_DISK_SIZE: ${{secrets.VM_DISK_SIZE}}
      VM_DISK_TYPE: ${{secrets.VM_DISK_TYPE}}


    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Start MySQL and create database
        run: |
          sudo /etc/init.d/mysql start
          
      - name: GCP Credentials
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{secrets.GCP_CREDENTIALS}}'

      - name: Build with Maven
        run: |
          sudo chmod 733 /var/log/
          mvn -B package --file pom.xml

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup-packer

      - name: Init and Build Custom Image with Packer
        working-directory: ./packer
        run: |
          packer init .
          packer fmt -check .
          packer validate .
          packer build .
          
      - name: Storing Image Name
        working-directory: ./packer
        run: |
          VM_IMAGE_NAME=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2) && echo "VM_IMAGE_NAME=$VM_IMAGE_NAME" >> "$GITHUB_ENV"

      - name: Generate random string
        id: random-string
        run: echo "RANDOM_STRING=$(uuidgen | tr -d '-')" >> $GITHUB_ENV

      - id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
         secrets: |-
           db_name:projects/882091279014/secrets/db_name
           db_ip:projects/882091279014/secrets/db_ip
           db_password:projects/882091279014/secrets/db_password
           db_username:projects/882091279014/secrets/db_username
           vm-kms-encryption:projects/882091279014/secrets/vm-kms-encryption

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: |
          gcloud compute instance-templates create $INSTANCE_TEMPLATE-$RANDOM_STRING \
            --machine-type=$MACHINE_TYPE \
            --instance-template-region=$REGION \
            --create-disk=image=projects/csye6225-dev-414805/global/images/$VM_IMAGE_NAME,size=$VM_DISK_SIZE,type=$VM_DISK_TYPE,auto-delete=yes,boot=true,kms-key=${{steps.secrets.outputs.vm-kms-encryption}} \
            --network=$GCLOUD_NETWORK \
            --subnet=$SUBNET \
            --metadata=startup-script="echo 'DATABASE_URL=jdbc:mysql://${{steps.secrets.outputs.db_ip}}:3306/${{steps.secrets.outputs.db_name}}?createDatabaseIfNotExist=true' > .env && \
            echo 'DATABASE_USERNAME=${{steps.secrets.outputs.db_username}}' >> .env && \
            echo 'DATABASE_PASSWORD=${{steps.secrets.outputs.db_password}}' >> .env && \
            sudo mv .env /opt/ && \
            sudo chown csye6225:csye6225 /opt/.env && \
            sudo setenforce 0 && \
            sudo systemctl daemon-reload && \
            sudo systemctl restart csye6225.service" \
            --service-account=$VM_INSTANCE_SERVICE_ACCOUNT \
            --tags=web


      - name: 'Link the managed instance group to use the new instance template'
        run: | 
          gcloud compute instance-groups managed set-instance-template \
          $INSTANCE_GRP_MANAGER \
          --template=projects/csye6225-dev-414805/regions/us-east1/instanceTemplates/$INSTANCE_TEMPLATE-$RANDOM_STRING

      - name: 'Start Rolling Update to update the grp manager to use the new instance template'
        run: |
          gcloud compute instance-groups managed rolling-action start-update $INSTANCE_GRP_MANAGER \
          --type=$ROLLING_ACTION_TYPE \
          --version=template=projects/csye6225-dev-414805/regions/us-east1/instanceTemplates/$INSTANCE_TEMPLATE-$RANDOM_STRING

      - name: 'Check if the rolling updates are done by checking version target reached flag'
        run: |
          gcloud compute instance-groups managed wait-until $INSTANCE_GRP_MANAGER \
          --version-target-reached \

      - name: 'Describing the instance grp manager status'
        run: |
          gcloud compute instance-groups managed describe $INSTANCE_GRP_MANAGER \